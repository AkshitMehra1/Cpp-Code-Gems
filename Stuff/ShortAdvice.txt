1. Whether the constants are defined with enum, const, or #define
makes no difference for the performance.

2. Instead of:	a = b / 1.2345;
You should:		a = b * (1. / 1.2345);
The compiler will calculate (1./1.2345) at compile time and insert the reciprocal in the
code, so you will never spend time doing the division. Some compilers will make this for
you but only if certain options are set to relax floating point precision.

2. For-loop tip:
std::priority_queue<int> pQueue;
for (int n : {1, 8, 5, 6, 3, 4, 0, 9, 7, 2})
	pQueue.push(n);

3. Delete has automatic check for nullptr.
int* val;
delete val; //Will crash

int* val = nullptr;
	delete val; //will not crash.

4. break; is used in switch cases, for-loops, while-loops.
if used it will break it then and there and jump out. 

5. Storing values as short rather than int could be less optimal than just normal ints unless 
you have plenty of shorts. This is because the CPU has to adjust the short value to make the
comparison which will be more costly than normal comparisons. Basically, just use ints and
don't try so hard.